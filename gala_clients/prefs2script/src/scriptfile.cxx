/*************************************************************************
* Copyright (c) 2015, Synopsys, Inc.                                     *
* All rights reserved.                                                   *
*                                                                        *
* Redistribution and use in source and binary forms, with or without     *
* modification, are permitted provided that the following conditions are *
* met:                                                                   *
*                                                                        *
* 1. Redistributions of source code must retain the above copyright      *
* notice, this list of conditions and the following disclaimer.          *
*                                                                        *
* 2. Redistributions in binary form must reproduce the above copyright   *
* notice, this list of conditions and the following disclaimer in the    *
* documentation and/or other materials provided with the distribution.   *
*                                                                        *
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  *
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   *
* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, *
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       *
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  *
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  *
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  *
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *
*************************************************************************/
//note that this is an abstract base class.
// Also note that the implementation is heavily dependent upon cstring which is quite slow for large files.
// for about 5k files, however, it is fine.
// if you want to build a bigger file, add an "empty" method and call it after <<



// implementation of Scriptfile
#include <string.h>
#include "scriptfile.h"
#include "cstring.h"
#include <pdustring.h>
#include <pdumem.h>




ScriptFile::ScriptFile()
{
	NL="\n";
	MSG1= "Auto-generated by DISCOVER prefs2script.";
	mpSepStrings="\\/";
	mpMyProtectString="\'";
	mpMySepString="/";
	mCommentString="###" ;
	mEchoString="echo ";
}

ScriptFile::~ScriptFile()
{
}

void ScriptFile::EchoCommands(int state)
{return;}

void ScriptFile::Comment(const char * text)
{
	mCharData+= NL + mCommentString + cstring(text) + NL;
}
//this allows you to expand the first part while preserving the rest...
void ScriptFile::Command(const char *subscommand, const char *nonsubscommand)
{
	cstring temp2;
	if (nonsubscommand)
	{
		temp2=nonsubscommand;
		temp2=ProtectSlashes(temp2);
	}
	if (subscommand)
	{
		cstring myTempString(subscommand);
		myTempString=ConvertSlashes(myTempString);
		
		mCharData+=NL+ myTempString;
		mCharData+=" "+ temp2 + NL;
	}
	else
		mCharData+=NL+ temp2 + NL;
	
	return;
}
cstring & ScriptFile::ConvertSlashes(cstring &string)
{
	char *p=pdstrdup((const char *) string);
	string="";
	if (p)
	{	int z= strlen(p);

		if (z)
		{	 int i=0;
			for (i; i<z; i++)
			{
				if (!strchr(mpSepStrings, p[i]))
					string+=p[i];
				else
					string+=mpMySepString;
			}
			
		}
		
	}
	FREE_MEMORY(p);
	return string;
}

	
	
cstring & ScriptFile::ProtectSlashes(cstring &string)
{
	char * p=pdstrdup((const char *) string);
	string="";
	
	char *q=strtok(p, " ");
	while (q)
	{
		string+=mpMyProtectString;
		string+=q;
		string+=mpMyProtectString;
		string+=" ";
		q=strtok(NULL, " ");
	}
	return string;
}

void ScriptFile::Command(const char *command)
{
	//this is extremely slow but I don't care...
	cstring myTempString(command);
	myTempString=ConvertSlashes(myTempString);
	mCharData+=NL+ myTempString +NL;
}
 ostream& operator<<(ostream & myOstream, const ScriptFile& myScriptFile)
{
	myOstream<<myScriptFile.mCharData;
	return myOstream;
}
