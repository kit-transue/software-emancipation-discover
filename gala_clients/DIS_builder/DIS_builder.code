/*************************************************************************
* Copyright (c) 2015, Synopsys, Inc.                                     *
* All rights reserved.                                                   *
*                                                                        *
* Redistribution and use in source and binary forms, with or without     *
* modification, are permitted provided that the following conditions are *
* met:                                                                   *
*                                                                        *
* 1. Redistributions of source code must retain the above copyright      *
* notice, this list of conditions and the following disclaimer.          *
*                                                                        *
* 2. Redistributions in binary form must reproduce the above copyright   *
* notice, this list of conditions and the following disclaimer in the    *
* documentation and/or other materials provided with the distribution.   *
*                                                                        *
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  *
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   *
* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, *
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       *
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  *
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  *
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  *
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *
*************************************************************************/
#include <vport.h>
 
#include vstartupHEADER
#include vstdlibHEADER
#include vsessionHEADER
#include vserviceHEADER
#include vscrapHEADER
#include vdasservHEADER
#include vstdioHEADER

#include <signal.h>
#include "Application.h"

#ifdef SERVER
#include <tcl.h>
#endif SERVER
 
#ifndef _WIN32
#ifndef SIG_TYP
#ifdef sun4
typedef void (*SIGHANDLER)(int,...);
#else
typedef void (*SIGHANDLER)(int);
#endif
#define SIG_TYP SIGHANDLER
#endif
#endif

static int Block(vsessionStatement *statement)
{
#ifndef _WIN32
    SIG_TYP old = signal(SIGALRM,SIG_IGN);
#endif
    int retval = statement->Block(NULL);
#ifndef _WIN32
    signal(SIGALRM,old);
#endif
    return retval;
}

typedef void async;
typedef char* _charptr;
typedef vstr* _vstrptr;

#define g_push(s) {vscrapSetArrayCount(real_result,array_index2+1);vscrapSetElementAt(real_result,array_index2,s);array_index2++;}
#define g_take() sarg? vscrapGetElementAt(sarg,array_index++): 0
 
static vscrap*  marshall_char(char x){return vscrapFromCharacter(x);}
static vscrap*  marshall_short(short x){return vscrapFromInteger((int)x);}
static vscrap*  marshall_int(int x){return vscrapFromInteger(x);}
static vscrap*  marshall_float(float x){return vscrapFromFloat(x);}
static vscrap*  marshall_double(double x){return vscrapFromFloat(x);}
static vscrap*  marshall__charptr(_charptr x){if (!x)x="";vstr*_x=vstrClone((vchar*)x);vscrap* s=vscrapFromString(_x);vstrDestroy(_x);return s;}
static vscrap*  marshall__vstrptr(_vstrptr x){if (!x)x=(_vstrptr)"";return vscrapFromString(x);}
 
static void demarshall_char(char* x, vscrap* s) 
{ 
    if (s) { 
        *x = vscrapGetCharacter(s);delete s;
    } else { 
        *x = '\0'; 
    } 
} 
 
static void demarshall_short(short* x, vscrap* s) 
{ 
    if (s) { 
        *x = vscrapGetInteger(s);delete s;
    } else { 
        *x = 0; 
    } 
} 
 
static void demarshall_int(int* x, vscrap* s) 
{ 
    if (s) { 
        *x = vscrapGetInteger(s);delete s;
    } else { 
        *x = 0; 
    } 
} 
 
static void demarshall_float(float* x, vscrap* s) 
{ 
    if (s) { 
        *x = vscrapGetFloat(s);delete s;
    } else { 
        *x = 0.0; 
    } 
} 
static void demarshall_double(double* x, vscrap* s) 
{ 
    if (s) { 
        *x = vscrapGetFloat(s);delete s;
    } else { 
        *x = 0.0; 
    } 
} 
 
extern "C" char* strdup(const char*);
static void demarshall__charptr(char** x, vscrap* s) 
{ 
    if (s) { 
        vstr*y = vstrCloneScribed(vscrapScribeString(s));delete s;
        *x = strdup((char*)y);
        vstrDestroy(y);
    } else { 
        *x = 0;
    } 
} 
 
static void demarshall__vstrptr(vstr** x, vscrap* s) 
{ 
    if (s) { 
        *x = vstrCloneScribed(vscrapScribeString(s));delete s;
    } else { 
        *x = 0;
    } 
} 
 
static vscrap *answer_scrap;


static void std_notify (vsessionStatement* statement, vsessionStatementEvent* event)
{
    vscrap *sync_answer_scrap = NULL;

    switch (vsessionStatement::GetEventCode (event)) {
        case vsessionStatementEVENT_COMPLETED:
	    statement->GetReturnValue(statement, &sync_answer_scrap);
	    statement->SetData(sync_answer_scrap);
	    break;
	case vsessionStatementEVENT_CANNOT_SEND:
	    printf ("*** cannot send!\n");
	    Application::SetCannotSend(vTRUE);
	    break;
	case vsessionStatementEVENT_END_SESSION:
	    printf ("*** end session!\n");
	    break;
	case vsessionStatementEVENT_FAILED:
	    printf ("*** failed!\n");
	    break;
    }
}

static void std_async_notify (vsessionStatement* statement, vsessionStatementEvent* event)
{

    Application::DecrementCount();
}

static Application* DISbuilder_app;


/*----------------------------- version ------------------------------*/

#ifdef SERVER
int version (ClientData, Tcl_Interp* interp, int argc, char *argv[])
{
    sprintf (interp->result, "DISbuilder 1.0");
    return TCL_OK;
}
#endif SERVER


/*----------------------------- dis_servereval ------------------------------*/

#ifdef CLIENT
static _vstrptr rcall_dis_servereval (Application* app, _vstrptr service, _vstrptr str)
{
    DISbuilder_app = app;
    static _vstrptr return_val;
    if (app && !app->mySession()) 
        app->connect (0, (char*)app->getName());
    if (!app || !app->mySession()) {
        if (Application::traceMode)
                fprintf (stderr, "Cannot call dis_servereval in DISbuilder - not connected\n");
        return 0;
    } else {
        if (Application::traceMode)
            printf ("+++> rcall_dis_servereval (Application* app, _vstrptr service, _vstrptr str)\n");
        Application::IncrementCount();
        vsessionStatement *statement = new vsessionStatement;
        statement->SetSession(app->mySession());
        statement->SetSignature(app->getSignature());
        vscrap *real_result=vscrapCreateArray();
        int array_index=0;
        int array_index2=0;
        g_push(marshall__charptr("dis_servereval"));
          g_push(marshall__vstrptr(service));
          g_push(marshall__vstrptr(str));
        statement->SetArgs(statement,real_result);
        if (real_result)delete real_result;
        statement->SetObserveStatementProc(std_notify);
        statement->Send();
        answer_scrap = NULL;
        Block(statement);
        vscrap *sarg = (vscrap *)statement->GetData();
        statement->DeleteLater();
        array_index  = 0;


        demarshall__vstrptr (&return_val, g_take());
        Application::DecrementCount();

        if (sarg){ sarg->DeleteLater(); }
        if (Application::traceMode)
            printf ("---> rcall_dis_servereval (Application* app, _vstrptr service, _vstrptr str)\n");
        return return_val;
    }
}
#endif CLIENT

#ifdef SERVER
static _vstrptr dis_servereval (_vstrptr service, _vstrptr str)
{
    Application* myapp = Application::findApplication (service);
    static vstr* myresult = NULL;
    if (!myapp) 
	myapp = DISbuilder_app;
    int e = myapp->eval((vchar*)str);
    myresult = NULL;
    myresult = myapp->getEvalResult();
    return myresult;
}


static void dis_servereval_fn (vscrap* sarg, vscrap* real_result, int& array_index, int& array_index2)
{
    _vstrptr service;
    _vstrptr str;

    if (Application::traceMode)
        printf ("+++< rcall_dis_servereval (Application* app, _vstrptr service, _vstrptr str)\n");
    demarshall__vstrptr (&service, g_take());
    demarshall__vstrptr (&str, g_take());

    _vstrptr return_val = dis_servereval (service,str);


    if (Application::traceMode)
        printf ("---< rcall_dis_servereval (Application* app, _vstrptr service, _vstrptr str)\n");
    g_push(marshall__vstrptr(return_val));
}

#endif SERVER


/*----------------------------- dis_servereval_async ------------------------------*/

#ifdef CLIENT
static async rcall_dis_servereval_async (Application* app, _vstrptr service, _vstrptr str)
{
    DISbuilder_app = app;
    if (app && !app->mySession()) 
        app->connect (0, (char*)app->getName());
    if (!app || !app->mySession()) {
        if (Application::traceMode)
                fprintf (stderr, "Cannot call dis_servereval_async in DISbuilder - not connected\n");
        return;
    } else {
        if (Application::traceMode)
            printf ("+++> rcall_dis_servereval_async (Application* app, _vstrptr service, _vstrptr str)\n");
        Application::IncrementCount();
        vsessionStatement *statement = new vsessionStatement;
        statement->SetSession(app->mySession());
        statement->SetSignature(app->getSignature());
        vscrap *real_result=vscrapCreateArray();
        int array_index=0;
        int array_index2=0;
        g_push(marshall__charptr("dis_servereval_async"));
          g_push(marshall__vstrptr(service));
          g_push(marshall__vstrptr(str));
        statement->SetArgs(statement,real_result);
        if (real_result)delete real_result;
        statement->SetObserveStatementProc(std_async_notify);
        statement->SetDestroyWhenFinished(TRUE);
        statement->Send();
        answer_scrap = NULL;
        vscrap * sarg=answer_scrap;


    }
}
#endif CLIENT

#ifdef SERVER
static async dis_servereval_async (_vstrptr service, _vstrptr str)
{
    Application* myapp = Application::findApplication (service);
    if (!myapp) 
	myapp = DISbuilder_app;
    int e = myapp->eval((vchar*)str);
    return;
}


static void dis_servereval_async_fn (vscrap* sarg, vscrap* real_result, int& array_index, int& array_index2)
{
    _vstrptr service;
    _vstrptr str;

    if (Application::traceMode)
        printf ("+++< rcall_dis_servereval_async (Application* app, _vstrptr service, _vstrptr str)\n");
    demarshall__vstrptr (&service, g_take());
    demarshall__vstrptr (&str, g_take());

    dis_servereval_async (service,str);


    if (Application::traceMode)
        printf ("---< rcall_dis_servereval_async (Application* app, _vstrptr service, _vstrptr str)\n");
}

#endif SERVER


/*----------------------------- dis_DISbuilder_eval ------------------------------*/

#ifdef CLIENT
_vstrptr rcall_dis_DISbuilder_eval (Application* app, _vstrptr str)
{
    DISbuilder_app = app;
    _vstrptr return_val;
    if (app && !app->mySession()) 
        app->connect (0, (char*)app->getName());
    if (!app || !app->mySession()) {
        if (Application::traceMode)
                fprintf (stderr, "Cannot call dis_DISbuilder_eval in DISbuilder - not connected\n");
        return 0;
    } else {
        if (Application::traceMode)
            printf ("+++> rcall_dis_DISbuilder_eval (Application* app, _vstrptr str)\n");
        Application::IncrementCount();
        vsessionStatement *statement = new vsessionStatement;
        statement->SetSession(app->mySession());
        statement->SetSignature(app->getSignature());
        vscrap *real_result=vscrapCreateArray();
        int array_index=0;
        int array_index2=0;
        g_push(marshall__charptr("dis_DISbuilder_eval"));
          g_push(marshall__vstrptr(str));
        statement->SetArgs(statement,real_result);
        if (real_result)delete real_result;
        statement->SetObserveStatementProc(std_notify);
        statement->Send();
        answer_scrap = NULL;
        Block(statement);
        vscrap *sarg = (vscrap *)statement->GetData();
        statement->DeleteLater();
        array_index  = 0;


        demarshall__vstrptr (&return_val, g_take());
        Application::DecrementCount();

        if (sarg){ sarg->DeleteLater(); }
        if (Application::traceMode)
            printf ("---> rcall_dis_DISbuilder_eval (Application* app, _vstrptr str)\n");
        return return_val;
    }
}
#endif CLIENT

#ifdef SERVER
_vstrptr dis_DISbuilder_eval (_vstrptr str)
{
    int e = DISbuilder_app->eval((vchar*)str);
    static vstr* result = NULL;
    result = DISbuilder_app->getEvalResult();
    return result;
}


void dis_DISbuilder_eval_fn (vscrap* sarg, vscrap* real_result, int& array_index, int& array_index2)
{
    _vstrptr str;

    if (Application::traceMode)
        printf ("+++< rcall_dis_DISbuilder_eval (Application* app, _vstrptr str)\n");
    demarshall__vstrptr (&str, g_take());

    _vstrptr return_val = dis_DISbuilder_eval (str);


    if (Application::traceMode)
        printf ("---< rcall_dis_DISbuilder_eval (Application* app, _vstrptr str)\n");
    g_push(marshall__vstrptr(return_val));
}

#endif SERVER


/*----------------------------- dis_DISbuilder_eval_async ------------------------------*/

#ifdef CLIENT
async rcall_dis_DISbuilder_eval_async (Application* app, _vstrptr str)
{
    DISbuilder_app = app;
    if (app && !app->mySession()) 
        app->connect (0, (char*)app->getName());
    if (!app || !app->mySession()) {
        if (Application::traceMode)
                fprintf (stderr, "Cannot call dis_DISbuilder_eval_async in DISbuilder - not connected\n");
        return;
    } else {
        if (Application::traceMode)
            printf ("+++> rcall_dis_DISbuilder_eval_async (Application* app, _vstrptr str)\n");
        Application::IncrementCount();
        vsessionStatement *statement = new vsessionStatement;
        statement->SetSession(app->mySession());
        statement->SetSignature(app->getSignature());
        vscrap *real_result=vscrapCreateArray();
        int array_index=0;
        int array_index2=0;
        g_push(marshall__charptr("dis_DISbuilder_eval_async"));
          g_push(marshall__vstrptr(str));
        statement->SetArgs(statement,real_result);
        if (real_result)delete real_result;
        statement->SetObserveStatementProc(std_async_notify);
        statement->SetDestroyWhenFinished(TRUE);
        statement->Send();
        answer_scrap = NULL;
        vscrap * sarg=answer_scrap;


    }
}
#endif CLIENT

#ifdef SERVER
async dis_DISbuilder_eval_async (_vstrptr str)
{
   int e = DISbuilder_app->eval((vchar*)str);
}


void dis_DISbuilder_eval_async_fn (vscrap* sarg, vscrap* real_result, int& array_index, int& array_index2)
{
    _vstrptr str;

    if (Application::traceMode)
        printf ("+++< rcall_dis_DISbuilder_eval_async (Application* app, _vstrptr str)\n");
    demarshall__vstrptr (&str, g_take());

    dis_DISbuilder_eval_async (str);


    if (Application::traceMode)
        printf ("---< rcall_dis_DISbuilder_eval_async (Application* app, _vstrptr str)\n");
}

#endif SERVER

#ifdef SERVER

    static int serverInited = 0;

void DISbuilderServerInit(){
    DISbuilder_app = Application::findApplication("DISbuilder");
    if (!serverInited) {
        Tcl_CreateCommand (DISbuilder_app->interp(), "version", version, NULL, NULL);
	serverInited = 1;
    }
}


vscrap* DISbuilderServer(    vservicePrimitive *primitive,
    vsession          *session,
    vscrap            *scrapArgs)
{
    DISbuilderServerInit();

    DISbuilder_app = Application::findApplication(session);
    vscrapArray *sarg=0;
    int array_index,max_index,array_index2;
    vstr *command;
    primitive->GetArgs(scrapArgs,&sarg);
    array_index=0;array_index2=0;
    max_index=vscrapGetArrayCount(sarg);
    demarshall__vstrptr (&command, g_take());
    vscrap *real_result=vscrapCreateArray();

    if (strcmp((char*)command, "dis_servereval") == 0) dis_servereval_fn(sarg,real_result,array_index,array_index2);
       else
    if (strcmp((char*)command, "dis_servereval_async") == 0) dis_servereval_async_fn(sarg,real_result,array_index,array_index2);
       else
    if (strcmp((char*)command, "dis_DISbuilder_eval") == 0) dis_DISbuilder_eval_fn(sarg,real_result,array_index,array_index2);
       else
    if (strcmp((char*)command, "dis_DISbuilder_eval_async") == 0) dis_DISbuilder_eval_async_fn(sarg,real_result,array_index,array_index2);
    else if (strcmp((char*)command, "server_eval") == 0) dis_servereval_fn(sarg,real_result,array_index,array_index2);
    else if (strcmp((char*)command, "server_eval_async") == 0) dis_servereval_async_fn(sarg,real_result,array_index,array_index2);

    vscrap *temp= primitive->MakeReturnScrap(session,real_result);
    if (real_result) delete real_result;
    if (command) vstrDestroy (command);
    if (sarg) delete sarg;
    return temp;
}

#endif SERVER
