/*************************************************************************
* Copyright (c) 2015, Synopsys, Inc.                                     *
* All rights reserved.                                                   *
*                                                                        *
* Redistribution and use in source and binary forms, with or without     *
* modification, are permitted provided that the following conditions are *
* met:                                                                   *
*                                                                        *
* 1. Redistributions of source code must retain the above copyright      *
* notice, this list of conditions and the following disclaimer.          *
*                                                                        *
* 2. Redistributions in binary form must reproduce the above copyright   *
* notice, this list of conditions and the following disclaimer in the    *
* documentation and/or other materials provided with the distribution.   *
*                                                                        *
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  *
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   *
* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, *
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       *
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  *
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  *
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  *
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *
*************************************************************************/
// parsemake_if.cxx
// provide a thread interface to makefile

#include "stdafx.h"
#include "make_toplevel.h"
#include "pdfwiz_globals.h"
#include "usermessage.h"
#include "new_make2proj.h"
#include <cassert>


// worker thread
// see Inside VC++, 4th ed. "Multithread Programming
UINT parsemake_thread_proc(LPVOID pParam)
{
//	assert(makefile::globalmakefile);
	while (!pendingmakeactions.empty()) {

		action a(pendingmakeactions.front());
		pendingmakeactions.pop();
		commandline c(a.commandline);
		makefile::globalmakefile = new makefile(c, a.dv);
		makefile &tmf = *makefile::globalmakefile;
		prefs.addMakefile(tmf);
		tmf.read_file(); 
		tmf.symbols->dump();
		//global_symbols->report_environment_usage();
		tmf.dump();

		set<string> const *targetset = &c.target();
		if (targetset->empty())
			targetset = tmf.list_default_targets();
		set<string>::iterator target;
		for (target = targetset->begin(); target != targetset->end(); ++target) {
			add_mftarget2graph(makefile::globalmakefile, *target);
			// grab all actions generated by this target:
			set<string> *alldeps = tmf.list_all_depends(*target);
			set<string>::iterator i = alldeps->begin();
			while (i != alldeps->end()) {
				set<action> *ap = tmf.list_makeactions(*i);
				set<action>::iterator ai = ap->begin();
				while (ai != ap->end()) {
					pendingmakeactions.push(*ai);
					++ai;
				}
				delete ap;
				++i;
			}
			delete alldeps;
		}
	}
	figure_clusters();
	//print_graph();
	set<subproj *> &tmp = graph2pdf();
	if (tmp.empty()) {
		// add empty subproject
		projname emptyname("empty", "C:\\", "empty");
		prefs.addSubProject(new subproj(emptyname));
		// and issue a warning
		// (or not)
	}
	else {
		set<subproj *>::iterator j;
		for (j = tmp.begin(); j != tmp.end(); ++j) {
			prefs.addSubProject(*j);
		}
	}
	prefs.setProjectName(prefs.suggestedProjectName());


	::PostMessage((HWND) pParam, WM_THREADFINISHED, 0, 0);
	return 0;
}

#if 0  // functionality still missing; to be moved to generation.

{
	prefs.write();
	write_scoping_rules(&cout);

	delete makefile::globalmakefile;
	message_manager::shutdown();
	return 0;
}
#endif
