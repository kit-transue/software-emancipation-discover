##########################################################################
# Copyright (c) 2015, Synopsys, Inc.                                     #
# All rights reserved.                                                   #
#                                                                        #
# Redistribution and use in source and binary forms, with or without     #
# modification, are permitted provided that the following conditions are #
# met:                                                                   #
#                                                                        #
# 1. Redistributions of source code must retain the above copyright      #
# notice, this list of conditions and the following disclaimer.          #
#                                                                        #
# 2. Redistributions in binary form must reproduce the above copyright   #
# notice, this list of conditions and the following disclaimer in the    #
# documentation and/or other materials provided with the distribution.   #
#                                                                        #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  #
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   #
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, #
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       #
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  #
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  #
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    #
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  #
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
##########################################################################
global Client
global env

###########################################################################
# proc 		MakeTempGroup
# Description:	if named group exists, delete it then re-create it as temp
############################################################################
proc MakeTempGroup { GroupName } {
        if {[group exists $GroupName]} {
                group delete $GroupName
        }
        group tmp $GroupName
	return
}

############################################################################
# proc DisplayMiniSelectionInEmacs
# Description: Not Exactly Sure
############################################################################
proc DisplayMiniSelectionInEmacs { sel } {
    if { [size $sel] != 0 } {
	open_view [set_copy $sel 1]
	emacs_command "(di-delete-selections)"
	emacs_command "(di-highlight-word)"
    }
    if { [mini_window_alive] == 0 } {
	return 
    }
}

############################################################################
# proc 		DisplayInMiniWithMovementKeys
# Description:	sets browser and mini-browser with AST nodes of global variables in selected functions
############################################################################
proc DisplayInMiniWithMovementKeys { sel } {
	if { [size $sel] == 0 } {
		msg -error "No Items Selected"
		return
	}
	set_mini -popup -vcr -click DisplayMiniSelectionInEmacs $sel
}

###########################################################################
# proc 		ShowAttributes
# Description:	Displays all attributes for a selected entity and shows in emacs
############################################################################
proc ShowAttributes { sel } {
	global env
	if { [size $sel] != 1 } {
		msg -error "Error:  Only select 1 item\n"
		return
	}
	set OutFile [open "$env(OutFile)" w+]
	foreach my_attribute [lsort [info attributes]] {
		if { $my_attribute == "group" || $my_attribute == "namespace" || $my_attribute == "catch" || $my_attribute == "file" || $my_attribute == "label" || $my_attribute == "error" || $my_attribute == "string" || $my_attribute == "package" || $my_attribute == "where" } {
			continue				;# these cause errors
		}
		if { $my_attribute == "dll" || $my_attribute == "exe" || $my_attribute == "strange" || $my_attribute == "writable" } {
			continue				;# these cause crashes
		}
		if { $my_attribute == "total_defects" || $my_attribute == "defect" } {
			continue				;# don't wanna load defectlink
		}
		if { [string length $my_attribute] >=16 } {
			puts $OutFile "$my_attribute	[$my_attribute $sel]"
		} elseif { [string length $my_attribute] >=8 } {
			puts $OutFile "$my_attribute		[$my_attribute $sel]"
		} else {
			puts $OutFile "$my_attribute			[$my_attribute $sel]"
		}
	}
	close $OutFile
	exec emacs $env(OutFile) &
}

###########################################################################
# proc 		DisplayAttributes
# Description:	Displays all attributes for a selected entity
############################################################################
proc DisplayAttributes { sel } {
	global env
	if { [size $sel] != 1 } {
		msg -error "Error:  Only select 1 item\n"
		return
	}
 	foreach my_attribute [lsort [info attributes]] {
		if { $my_attribute == "group" || $my_attribute == "namespace" || $my_attribute == "catch" || $my_attribute == "file" || $my_attribute == "label" || $my_attribute == "error" || $my_attribute == "string" || $my_attribute == "package" || $my_attribute == "where"} {
			continue				;# these cause errors
		}
		if { $my_attribute == "dll" || $my_attribute == "exe" || $my_attribute == "strange" || $my_attribute == "writable" } {
			continue				;# these cause crashes
		}
 		if { [string length $my_attribute] >=16 } {
			puts "$my_attribute	[$my_attribute $sel]"
		} elseif { [string length $my_attribute] >=8 } {
			puts "$my_attribute		[$my_attribute $sel]"
		} else {
			puts "$my_attribute			[$my_attribute $sel]"
		}
	}
}

###########################################################################
# proc 		ShowModifiedObjects
# Description:	Displays Ojects in source files that have been modified
############################################################################
proc ShowModifiedObjects { sel } {
	set files [filter module $sel]
	if { [size $files] == 0 } {
		msg -error "No Files Selected"
		return
	}
	browser set results [modified_objects $files]
}

############################################################################
# proc 		ImpactAnalysisReport
# Description:	Report entities, files, subsystems, ...etc. affected by change
############################################################################
proc ImpactAnalysisReport { args } {
	global env
	if {[size $args]==0} {
		puts "Error No Args"
		return
	}

	set OutFile [open "$env(OutFile)" w+]
#	MakeTempGroup DIS_TMP_GRP
	MakeTempGroup DIS_TMP_GRP_SELECTED
	MakeTempGroup DIS_TMP_GRP_MODIFIED
	MakeTempGroup DIS_TMP_GRP_FILES_MODIFIED
	MakeTempGroup DIS_TMP_GRP_AFFECTED
	MakeTempGroup DIS_TMP_GRP_FILES_AFFECTED
	MakeTempGroup DIS_TMP_GRP_DISCARDED
	MakeTempGroup DIS_TMP_GRP_FILES_RECOMPILE

	#----------------------------------------------------
	# these things are external and don't have definitions
	#----------------------------------------------------
	group add DIS_TMP_GRP_DISCARDED [filter stringl $args]
	group add DIS_TMP_GRP_DISCARDED [filter constant $args]
	group add DIS_TMP_GRP_DISCARDED [filter local $args]
	
	#----------------------------------------------------
	# assume this means the line has changed, not necessarily the entity
	#----------------------------------------------------
	group add DIS_TMP_GRP_DISCARDED [filter instance $args]
	group add DIS_TMP_GRP_DISCARDED [filter ast $args]

	#----------------------------------------------------
	# initialize Modified group with ALL selected things
	#----------------------------------------------------
	group set DIS_TMP_GRP_SELECTED $args
	group set DIS_TMP_GRP_MODIFIED $args
	
	#----------------------------------------------------
	# resolve all instances to scope of instance
	#----------------------------------------------------
	foreach ThisInst [filter instance [group get DIS_TMP_GRP_DISCARDED]] {
		group add DIS_TMP_GRP_MODIFIED [inst_scope $ThisInst]
#		group subtract DIS_TMP_GRP_DISCARDED $ThisInst]
	}
	
	#----------------------------------------------------
	# files and projects are special exeptions too
	#----------------------------------------------------
	group add DIS_TMP_GRP_DISCARDED [filter module $args]
	group add DIS_TMP_GRP_DISCARDED [filter project $args]

	#----------------------------------------------------
	# adjust to contain only actual modified entities
	#----------------------------------------------------
	group subtract DIS_TMP_GRP_MODIFIED [group get DIS_TMP_GRP_DISCARDED]
	
	#----------------------------------------------------
	# Modified files contain location of Modified entities
	# and all files specifically selected
	#----------------------------------------------------
	group add DIS_TMP_GRP_FILES_MODIFIED [where defined [group get DIS_TMP_GRP_MODIFIED]]
	group add DIS_TMP_GRP_FILES_MODIFIED [filter module [group get DIS_TMP_GRP_DISCARDED]]
		
	#----------------------------------------------------
	# Set Affected group to 'where used' for functions,
	# variables, and macros
	#----------------------------------------------------
	group add DIS_TMP_GRP_AFFECTED [where used [filter function [group get DIS_TMP_GRP_MODIFIED]]]
	group add DIS_TMP_GRP_AFFECTED [where used [filter variable [group get DIS_TMP_GRP_MODIFIED]]]
	group add DIS_TMP_GRP_AFFECTED [where used [filter macro [group get DIS_TMP_GRP_MODIFIED]]]

	#----------------------------------------------------
	# Set Affected group to 'where used' and trace through
	# typedefs for structures/classes, enums, and typedefs
	#----------------------------------------------------
	group add DIS_TMP_GRP_AFFECTED [where used [filter class [group get DIS_TMP_GRP_MODIFIED]]]
	group add DIS_TMP_GRP_AFFECTED [where used [filter enum [group get DIS_TMP_GRP_MODIFIED]]]
	group add DIS_TMP_GRP_AFFECTED [where used [filter typedef [group get DIS_TMP_GRP_MODIFIED]]]
	group add DIS_TMP_GRP_AFFECTED [where used [filter typedef [where used [filter class [group get DIS_TMP_GRP_MODIFIED]]]]]
	group add DIS_TMP_GRP_AFFECTED [where used [filter typedef [where used [filter enum [group get DIS_TMP_GRP_MODIFIED]]]]]
	group add DIS_TMP_GRP_AFFECTED [where used [filter typedef [where used [filter typedef [group get DIS_TMP_GRP_MODIFIED]]]]]

	#----------------------------------------------------
	# Affected files contain location of Affected entities
	# but do not contain files already listed in Modified Files
	#----------------------------------------------------
	group add DIS_TMP_GRP_FILES_AFFECTED [where defined [group get DIS_TMP_GRP_AFFECTED]]
	group subtract DIS_TMP_GRP_FILES_AFFECTED [group get DIS_TMP_GRP_FILES_MODIFIED]

	#----------------------------------------------------
	# Find all files that will need to be re-compiled
	#----------------------------------------------------
	set LastSize 0
	group set DIS_TMP_GRP_FILES_RECOMPILE [group get DIS_TMP_GRP_FILES_MODIFIED]
	while {[group size DIS_TMP_GRP_FILES_RECOMPILE] != $LastSize} {
		set LastSize [group size DIS_TMP_GRP_FILES_RECOMPILE]
		group add DIS_TMP_GRP_FILES_RECOMPILE [where included [group get DIS_TMP_GRP_FILES_RECOMPILE]]
	}

	#----------------------------------------------------
	# Print the report based on the accumulated information
	#----------------------------------------------------
	puts $OutFile "================================================="
	puts $OutFile "    Impact Report on [group size DIS_TMP_GRP_SELECTED] Selected Items  "
	puts $OutFile "================================================="
	puts $OutFile "Author: $env(USER)"
	puts $OutFile ""
	puts $OutFile "Number of Modified Objects: [group size DIS_TMP_GRP_MODIFIED]"
	puts $OutFile "Number of Modified Sources: [group size DIS_TMP_GRP_FILES_MODIFIED]"
	puts $OutFile "Number of Affected Objects: [group size DIS_TMP_GRP_AFFECTED]"
	puts $OutFile "Number of Affected Sources: [group size DIS_TMP_GRP_FILES_AFFECTED]"
	puts $OutFile "Number of Files Needing Recompilation: [group size DIS_TMP_GRP_FILES_RECOMPILE]"

	puts $OutFile ""
	puts $OutFile "Modified Objects:"
	puts $OutFile "-----------------"
	foreach ThisEntity [sort kind [group get DIS_TMP_GRP_MODIFIED]] {
		puts $OutFile "	[kind $ThisEntity]	[name $ThisEntity]"
	}
	puts $OutFile ""
	puts $OutFile "Modified Sources:"
	puts $OutFile "-----------------"
	foreach ThisEntity [sort fname [group get DIS_TMP_GRP_FILES_MODIFIED]] {
		puts $OutFile "	[fname $ThisEntity]"
	}
	puts $OutFile ""

	puts $OutFile "Affected Objects:"
	puts $OutFile "-----------------"
	foreach ThisEntity [sort kind [group get DIS_TMP_GRP_AFFECTED]] {
		puts $OutFile "	[kind $ThisEntity]	[name $ThisEntity]"
	}
	puts $OutFile ""
	puts $OutFile "Affected Sources:"
	puts $OutFile "-----------------"
	foreach ThisEntity [sort fname [group get DIS_TMP_GRP_FILES_AFFECTED]] {
		puts $OutFile "	[fname $ThisEntity]"
	}
	puts $OutFile ""
	puts $OutFile "Files Needing Recompilation:"
	puts $OutFile "-----------------"
	foreach ThisEntity [sort fname [group get DIS_TMP_GRP_FILES_RECOMPILE]] {
		puts $OutFile "	[fname $ThisEntity]"
	}
	
	puts $OutFile ""
	puts $OutFile "Sorted List of Modified Entities by File"
	puts $OutFile "----------------------------------------"
	set ThisFileName "NoFile"
	foreach ThisEntity [sort fname [group get DIS_TMP_GRP_MODIFIED]] {
		if {"[fname $ThisEntity]"!="$ThisFileName"} {
			set ThisFileName [fname $ThisEntity]
			if {"$ThisFileName"==""} {
				puts $OutFile "Location: External"
			} else {
				puts $OutFile "Location: $ThisFileName"
			}
		}
		puts $OutFile "	[kind $ThisEntity]	[name $ThisEntity]"
	}

	puts $OutFile ""
	puts $OutFile "Sorted List of Affected Entities by File"
	puts $OutFile "----------------------------------------"
	set ThisFileName "NoFile"
	foreach ThisEntity [sort fname [group get DIS_TMP_GRP_AFFECTED]] {
		if {"[fname $ThisEntity]"!="$ThisFileName"} {
			set ThisFileName [fname $ThisEntity]
			if {"$ThisFileName"==""} {
				puts $OutFile "Location: External"
			} else {
				puts $OutFile "Location: $ThisFileName"
			}
		}
		puts $OutFile "	[kind $ThisEntity]	[name $ThisEntity]"
	}
	
	close $OutFile
	exec emacs $OutFileName &
	
	group delete DIS_TMP_GRP_SELECTED
	group delete DIS_TMP_GRP_MODIFIED
	group delete DIS_TMP_GRP_DISCARDED
	group delete DIS_TMP_GRP_FILES_MODIFIED
	return
}

############################################################################
# proc 		ShowHomeFiles
# Description:	Displays all checked-out files in browser's elements column
############################################################################
proc ShowHomeFiles {} {
	browser set elements [defines -module [home_proj]]
}

########################################################
#       WinkinGenerated
#       Winkin selected modules if possible
########################################################
proc WinkinGenerated { sel } {
        global env
        if { [size $sel] == 0 } {
                return OK
        }
        set DO_LIST_FILE "$env(sharedModelRoot)/all_dos.lst"
        set WinkedInFiles ""
        set FileList [filter -module $sel]
        foreach LOGICAL_FILE $FileList {
                set LOGICAL_FILE_NAME [fname $LOGICAL_FILE]
                set FILEFOUND [exec echo $LOGICAL_FILE_NAME | sed "s@/$env(MODELNAME)@$env(sharedSrcRoot)@" | xargs -i## egrep ## $DO_LIST_FILE]
                if {"$FILEFOUND" != ""} {
                        msg "Winking In $FILEFOUND\n"
                        exec /usr/atria/bin/cleartool winkin $FILEFOUND
                        set WinkedInFiles "$WinkedInFiles\n$FILEFOUND"
                } else {
                        msg "Failed to find DO to match $FILEFOUND\n"
                }
        }
        msg -warning "Winked In Files: $WinkedInFiles"
        return OK
}

########################################################
#       ShowWinkinGenerated
#       Display generated files existing in file system
########################################################
proc ShowWinkinGenerated { } {
        global env
        set DO_LIST_FILE "$env(sharedModelRoot)/all_dos.lst"
        set FileList [exec /usr/atria/bin/cleartool lspriv -s | xargs -i## egrep ## $DO_LIST_FILE | sed "s@^$env(sharedSrcRoot)@/$env(MODELNAME)@" | sed "s#@@.*##"]
        browser set elements $FileList
        return OK
}

########################################################
#       UniqueInstances
#       Filter list of instances to contain unique lines
########################################################
proc UniqueInstances { InPutGroupName OutPutGroupName } { 
#        if { [ group exists $OutPutGroupName ] } {
#                group delete $OutPutGroupName
#        }
#        set InsGroup [ group get $InPutGroupName ]
#        set SortedGroup [ sort -a lname -a line $InsGroup ]
#        set curline -1
#        set curfile ""
#        set UniqGroup [nil_set]
#        foreach Data $SortedGroup {
#                set file [lname $Data]
#                if { $file == "" } {
#                        next
#                }
#                if ( $curfile != $file } {
#                        set UniqGroup [set_union $UniqGroup $Data ]
#                        set curfile $file
#                        next
#                }
#                set line [line $Data]
#                if { $curline != $line } {
#                        set UniqGroup [set_union $UniqGroup $Data ]
#                        set curline $line
#                        next
#                }
#        }
#        group tmp $OutPutGroupName [set_union $UniqGroup $UniqGroup]
#        group save $OutPutGroupName
#        return OK
#}

########################################################
#       ExportGroupToDevx
#       Copy group from Browser user area to Devx user area
########################################################
proc ExportGroupToDevx { } {
        global env
	set sel [smgr -getsel]
	if {[llength $sel] != 1} {
		msg -error "This Procedure Takes 1 Group-Name Argument\n$sel\n[size $sel]"
		return
	}
        set BrowserGroupFile "$env(privateModelRoot)/groups/ext/$sel.grp"
	set DevxGroupFile "$env(HOME)/dislite/$env(MODELNAME)/$sel.grp"
        exec cp $BrowserGroupFile $DevxGroupFile
        return OK
}


add_menu "$Client.Util"
add_item "$Client.Util"	"Display in Mini"	DisplayInMiniWithMovementKeys	-optional
add_item "$Client.Util"	"Show Attributes"	ShowAttributes			-optional
#add_item "$Client.Util"	"Uniq Instances"	UniqueInstances			-optional
#add_menu "$Client.Util.Group"
#add_item "$Client.Util.Group"	"List Groups"		DisplayGroupsInBrower		-none
#add_item "$Client.Util.Group"	"Export to Devx"	ExportGroupToDevx		-none
#add_menu "$Client.Util.Winkin"
#add_item "$Client.Util.Winkin"	"Winkin Module"		WinkinGenerated                 -optional
#add_item "$Client.Util.Winkin"	"Show Winkedin Modules"	ShowWinkinGenerated             -none
add_item "$Client.Util"	"Show CheckedOut"	ShowHomeFiles			-none

