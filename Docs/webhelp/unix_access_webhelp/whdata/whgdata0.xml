<?xml version='1.0' encoding='ISO-8859-1' ?>
<glossarydata>
 <entry name="Abstract Syntax Tree" value="The Abstract Syntax Tree (AST) is a structure representing the meaningful segments of a source file, such as declarations, class definitions, function definitions, statements, expressions, identifiers, operators, and constants. The AST indicates how the larger segments of a source file are composed of smaller segments." />
 <entry name="Access" value="Access is a TCL-based language that allows you to write scripts that perform complex operations with Code Integrity. The Access client communicates directly with the Information Model through a command line interface and enables enterprise-level features and functionality not available through the Browser." />
 <entry name="build server" value="Similar to a model server, a build server runs on a host machine. Its purpose, however, is to manage Submission Check communications between the information model and your source code. A feature of the Developer Xpress client, Submission Check verifies the source code file’s existence in the information model and allows you to apply standard quality filters against it prior to its check in to your SCM system." />
 <entry name="caliper" value="An analysis and reporting tool for C, C++, and Java programming projects. Caliper applies a series of predefined ANSI and industry accepted programming rules and metrics to produce a Quality Assessment Report, or QAR." />
 <entry name="call tree" value="A schematic diagram representing the call dependencies of selected entities." />
 <entry name="configuration management system" value="A source control system set up to manage the configuration and transparent source sharing of your files (i.e. Source Integrity, Rational ClearCase)." />
 <entry name="cyclomatic complexity" value="A measure of complexity within a specified function; a higher value means greater complexity." />
 <entry name="Developer Xpress" value="Developer Xpress is a lightweight, easy-to-use browsing and query tool that enables you to navigate through your application’s project structure and query your information model." />
 <entry name="dormant" value="Dormant is a code analysis utility that identifies unused source code entities in your application" />
 <entry name="DSIM" value="DISIM (short for DISCOVER—now named Code Integrity—Information Model) refers to the scripts and underlying command-line tools that are aware of the information model repository. Previously, DISIM was the unique, simple, automated procedure for creating an information model." />
 <entry name="entity" value="An entity describes any individual element of your source code maintained in the AST. An entity may be as large as an entire file or as small as a variable. In the Browser, entities are categorized by name: file, function, class, variable, method, enum, string. Selecting one category displays all entities of that type that appear in your source code." />
 <entry name="entity relation diagram" value="An Entity Relation Diagram (ERD) helps you to interpret C++ or Java classes. It shows the relationships between C structures or C++ classes consisting of either. Symbols and color-coded lines indicate the nature of the relationships." />
 <entry name="function path mapping" value="The process of looking at source and target functions to see if there are paths between them for a function query." />
 <entry name="group" value="A group is a useful collection of files or entities that you can create for your convenience. A group can contain any entity, instance, or combination of entities and instances." />
 <entry name="group member" value="A group member is an entity or instance in a group" />
 <entry name="hits" value="A quantity of violations." />
 <entry name="impact analysis" value="Impact Analysis allows you to examine the options for and consequences of performing proposed changes to your source code. Code Integrity illustrates how change will affect, or impact, your source, enabling you to make intelligent decisions about whether or not you should make a change." />
 <entry name="impact analysis report" value="A comprehensive document that details proposed changes as well as the affected entities and files." />
 <entry name="include files" value="Source files inserted into a compilation unit during preprocessing." />
 <entry name="information model" value="An information model is a data repository created when Code Integrity examines your source, parses the code, and instead of creating object files, saves it in two language-independent formats: the Source Mode Tree (SMT) and the Abstract Syntax Tree (AST)." />
 <entry name="inheritance" value="The relationship between base and derived classes." />
 <entry name="instance" value="An instance refers to a single occurrence of an entity in your source. A single entity may very well have multiple instances. For example, a single function may be called in multiple source files; in this case, the function has a single instance in each place in the source where it is called." />
 <entry name="integrated development environment" value="A supported development application, such as Borland JBuilder, that allows you to access Code Integrity functionality." />
 <entry name="local variable" value="A variable that can be accessed only by instructions within a particular subroutine." />
 <entry name="logical file name" value="A file name that allows you to refer to multiple physical paths with a single name. Two different versions of the same file in different directories can share the same logical name; therefore, you can create a logical name and define multiple physical paths equivalent to it." />
 <entry name="metrics" value="Metrics measure code entities and files. Metric data helps you make intelligent decisions based on the size and scope of your code. For example, you may ask: Is a function too complex? How many bytes does a file comprise? How many loops, defaultless switches, or lines of code are present?" />
 <entry name="model browser" value="The Code Integrity Browser is the primary graphical user interface (GUI) for exploring and querying your information model. It allows you to scan existing projects and to browse your information model to collect data about your source." />
 <entry name="model server" value="A model server is a process that runs on a host machine serving the Code Integrity enterprise environment. This process makes information models readily and conveniently available to end users who connect through a Developer Xpress or Access client. Model servers communicate directly with the Information Model data structure." />
 <entry name="Myer’s Complexity" value="A measure of complexity for a function or file." />
 <entry name="nested structures" value="The Code Integrity term for nested entities in source code." />
 <entry name="persistent group" value="A saved group." />
 <entry name="physical file name" value="The actual name for a file as it appears in the file directory (i.e. /user/source/test.c)." />
 <entry name="project" value="A Code Integrity project defines the content of an individual information model, and is designed to mirror your organization’s software development projects. Selecting a project sets the scope of your browsing activities, as only files and entities included in that project are available for browsing and querying." />
 <entry name="pruning" value="Pruning removes selected branches from a Call Tree View." />
 <entry name="quality assessment report" value="A Quality Assessment Report, or QAR, provides quantitative information in both graphical and textual forms about the structure and compliance of a software development project to these rules, plus a list of non-compliant instances for review and remediation." />
 <entry name="quality filter sets" value="Quality Filter Sets, or QFS, are a collection of weighted filters used by Caliper to access a particular aspect of development." />
 <entry name="query" value="The query is the central activity of Code Integrity browsing tools. A query allows you to discover information about your source code—”show me where this function is defined in my source,” or ”show me everywhere this class is used.” A single query can tell you such things as the number of entities of a specific type that occur in your source, location of a specific entity, how it is used, and how it relates to other entities in your source. You can also employ a series of queries to create a more complex analysis of your source." />
 <entry name="scratch group" value="A temporary group that has not been saved." />
 <entry name="simplify.h" value="Simplify.h is a quick and effective way to prevent header files from being included unnecessarily in your source files." />
 <entry name="sublass" value="A class that inherits variables and methods defined in a superclass that has the basic required properties." />
 <entry name="submission check" value="A feature in Developer Xpress that allows the user to subject files that are going to be submitted to a series of tests, called queries." />
 <entry name="superclass" value="A dominant class from which variables and methods are defined to be inherited by other subclasses." />
 <entry name="transform" value="Functionality in Developer Xpress that allows it to recognize files in those cases in which the file paths differ between the server and client, or between shared and local versions of a file." />
 <entry name="tree pattern matching" value="A tool for searching parse trees that are constructed and saved while building your information model. TPM can find many different constructions of interest such as coding standards violations, portability or threading concerns, and internationalization. TPM also includes a change propagation feature that facilitates automating code changes." />
 <entry name="violation" value="An area in your source code that does not meet defined programming standards." />
 <entry name="windowing" value="Windowing allows you to maintain a set number of separate versions of the same model for historical purposes, and serve a set number of those models to your end users." />

</glossarydata>
