Ofer Mazor
8/27/1998


                            DEFECT LINK INTERNALS


Overview:  
=========

  DefectLink is an extension to DISCOVER that allows the user to incorporate
information about defects into the DISCOVER model. Specifically, it creates
links between defect IDs and the actual entities that were modified to fix
those defects. In addition, some of the information stored in the defect
tracking system can be displayed through the DISCOVER browser as well (e.g.,
date of close, severity, owner of defect).

  DISCOVER determines which entities are associated with a particular defect
by querying the CM system for information about recently changed files and
the defect IDs associated with those changes. By calculating which regions
of the files were modified, it can determine which particular entities were 
modified and then link those entities with the defect ID(s) for that change.

  In order to provide the user with this information, DISCOVER must interface
with the user's CM system and their defect tracking system. Since we have no 
control over these aspects of the user's environment, DISCOVER's interface
to these two systems must be customized. The mechanism for these interfaces
was designed to be as simple and as flexible as possible.

  The documentation for DefectLink provides a detailed explanation of how 
DefectLink works from a user's point of view. This document suppliments
the user documentation by providing more technical details.




Internal Details:
=================

Day to Day Operation:
---------------------
  The core of DefectLink is contained in the files:
    /p/s/p/api/src/defect.C
    /p/s/p/api/include/defect.h
and the scripts located in:
    /p/s/DefectProducts/DefectLink/

  The main impact of DefectLink to the DISCOVER source code is the addition of 
the Defect class. An instance of this class represents a single defect ID.
Defects are temporary entities and are not stored between DISCOVER sessions.
Instead, the required defects are repopulated into a DISCOVER session the 
first time a DefectLink command is called. 

  The links between defect IDs and entities are stored as external attributes 
for the entities. This means that all entities associated with defects will 
have a valid value in their '_defect' attribute. If an entity is associated 
with defects 333 and 777, its _defect attribute will be "333 777". The file 
containing all the _defect attributes for all valid entities is stored in 
<DISCOVER-Subsystems>/ext/_defect.attr. This file is read the first time a 
DefectLink command is called so DISCOVER knows which defects to create. By 
querying the _defect.attr file (either directly or using derived information)
DISCOVER is able to determine the links between defects and entities.
An example _defect.attr file is 
/p/s/DefectProducts/DefectLink/external_data/_defect.attr

  In addition, when DefectLink is loaded up in a DISCOVER session, it will
also try to read a file with attributes about each of the defects. This
file will probably be a dump of the user's defect tracking system. Since all
DISCOVER really knows about is defect IDs, this file lets it associate those 
IDs with, for example, the severity and close date of a defect.


Interface with CM System:
-------------------------

  DefectLink does not interface directly with the user's CM system. Instead
the user must run a script to query the CM system and format it in the desired
format. An example script that works for Clearcase on our environment is 
/p/s/DefectProducts/DefectLink/external_scripts/DL_clearcase_updater.pl.
Basically, what this script does is it queries Clearcase for changes in
/paraset/src/ for a specific time period, and then finds all those changes
that have bug numbers in their comment fields. It then puts this info into
a file with the following formatting: Every line of the file represents one
file submission (change). Each line is delimited by whitespace and contains 
the following fields in order:  
 <current name of file> 
 <full name (with version number) of file directly after the change> 
 <full name of file directly before the change>
 <whitespace separated list of defect IDs associated with the change>
An example of such a file (generated by the DL_clearcase_updater.pl script)
is /p/s/DefectProducts/DefectLink/external_data/clearcase_hist.

  When 'discover -batch <..> -defect_link' is run, DISCOVER will read a file
in the format described above and for each line, perform a 3-way diff to
determine which regions of the current file were modified during the change.
From that it determines which entities were modified in the change and 
therefore, which entities to associate with the defect IDs listed on that line.
The code for this process is in  /p/s/DefectProducts/DefectLink/dis_DL_main.dis.



Interface with Defect Tracking System:
--------------------------------------

  Each time a DISCOVER session initializes DefectLink, it reads in a file
with attributes about each defect. This file should be generated based on 
the information stored in the user's defect tracking system. The format
of this file is explained in the user documentation of DefectLink. The code 
for the process of reading this file is in  
/p/s/DefectProducts/DefectLink/dis_DL_main.di

  A sample file with defect information is
/p/s/DefectProducts/DefectLink/external_data/bugtool_data
and the script that generated this (from our bugtool) is
/p/s/DefectProducts/DefectLink/external_scripts/DL_export_bugdb





WebView Additions:
==================

  DefectLink information can also be accessed through WebView. To activate this
feature, you must pass a 'defectLink' parameter with value 1 to the WebView 
applet. This now allows you to view defects and perform the standard queries 
(i.e., Defects->Entities and Entities->Defects). 

  In addition, there are now DefectLink options in the Preferences window.
These preferences are global for your entire WebView session. When they are
modified, the WebView session is reset.

  The first preference the user can change is the date range. This will narrow
down the number of defects that WebView will display to only those whose
close date is within the specified range. 

  The other preference that can be changed is whether or not defect counts are
displayed. When this is activated, every entity that is displayed in the 
browser will have the number of defects associated with it (for the given date
range) displayed next to it.


