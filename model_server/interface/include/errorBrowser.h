/*************************************************************************
* Copyright (c) 2015, Synopsys, Inc.                                     *
* All rights reserved.                                                   *
*                                                                        *
* Redistribution and use in source and binary forms, with or without     *
* modification, are permitted provided that the following conditions are *
* met:                                                                   *
*                                                                        *
* 1. Redistributions of source code must retain the above copyright      *
* notice, this list of conditions and the following disclaimer.          *
*                                                                        *
* 2. Redistributions in binary form must reproduce the above copyright   *
* notice, this list of conditions and the following disclaimer in the    *
* documentation and/or other materials provided with the distribution.   *
*                                                                        *
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  *
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   *
* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, *
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       *
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  *
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  *
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  *
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *
*************************************************************************/
#ifndef _errorBrowser_h
#define _errorBrowser_h

// errorBrowser.h
//------------------------------------------
// synopsis:
// Class declaration for interface to errors generated by the parsers.
//------------------------------------------

#include "cLibraryFunctions.h"

#ifndef _XtIntrinsic_h
typedef struct _WidgetRec *Widget;
#endif

#include <objArr.h>
#include <errorReport.h>

RelClass(errNoteHeader);
RelClass(RTL);

class SelectFromRTL;

extern "C"{
    void errorBrowserClear(void);
    void errorBrowser_show_errors();
    //void errorBrowser_collect_errors(const char* lname = NULL);
    void errorBrowser_collect_errors_array(sharedArrOf(errorReport)& array,
                                           const char* lname = NULL);
    int  errorBrowser_empty();
    void errorBrowser_show_errors_array();
    void errorBrowser_print_errors();
}

// DIS_main.code calls this to init the error info and get the file name.
const char* get_parser_error_filename();

class errorBrowser
{
  public:
friend void errorBrowserClear();
    static void popup();

    errorBrowser();
    ~errorBrowser();

    void suspend_display();
    void add_error(errorReport*);
    void resume_display();
    void timestamp(const char*);


    const char* get_error_filename();
    FILE* get_error_fd();
    bool error_file_open();
    void open_error_file();
    void flush_error_file();
    void close_error_file();


  private:
    genString error_filename_;
    FILE* error_fd_;

    static void select_callback(void*, int, int, const char*);
    static void destroy_callback(void*);
    SelectFromRTL *sf_rtl;

    objArr rtl_selection;
};


// Inline methods.
inline const char* errorBrowser::get_error_filename() { return error_filename_; }
inline FILE* errorBrowser::get_error_fd() { return error_fd_; }
inline bool errorBrowser::error_file_open() {
    if (error_fd_) return true;
    else return false;
}
inline void errorBrowser::open_error_file() {
    if (error_fd_ == NULL)
        error_fd_ = OSapi_fopen(get_error_filename(), "a+");
}
inline void errorBrowser::flush_error_file() {
    if (error_fd_ != NULL)
        OSapi_fflush(error_fd_);
}
inline void errorBrowser::close_error_file() {
    if (error_fd_ != NULL) {
        OSapi_fclose(error_fd_);
        error_fd_ = NULL;
    }
}


#endif // _errorBrowser_h
