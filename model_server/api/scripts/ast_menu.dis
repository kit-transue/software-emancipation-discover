##########################################################################
# Copyright (c) 2015, Synopsys, Inc.                                     #
# All rights reserved.                                                   #
#                                                                        #
# Redistribution and use in source and binary forms, with or without     #
# modification, are permitted provided that the following conditions are #
# met:                                                                   #
#                                                                        #
# 1. Redistributions of source code must retain the above copyright      #
# notice, this list of conditions and the following disclaimer.          #
#                                                                        #
# 2. Redistributions in binary form must reproduce the above copyright   #
# notice, this list of conditions and the following disclaimer in the    #
# documentation and/or other materials provided with the distribution.   #
#                                                                        #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  #
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   #
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, #
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       #
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  #
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  #
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    #
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  #
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
##########################################################################

############################################################################
# proc 		FindValidASTNodes
# Description:	Find the next parent node with ast_offset!=0
############################################################################
proc FindValidASTNodes { sel } {
    set nodes [data node $sel]
    if {[size $nodes] < 1} {
	msg -error "Selection could not be converted to AST nodes."
	return "Bad selection."
    } else {
	set result [nil_set]
	foreach ThisNode $sel {
	    while { [size $ThisNode] != 0 && [ast_offset $ThisNode] == 0 } {
		set ThisNode [tree navigate <- $ThisNode]
	    }
	    if {[size $ThisNode] != 0} {
		sappend $result $ThisNode
	    }
	}
	return [set_unique $result]
    }
}

############################################################################
# proc 		FindASTNodesOfEntitiesFromName
# Description:	Find AST nodes of selected entities
############################################################################
proc FindASTNodesOfEntitiesFromName { sel } {
    if { [size $sel] == 0 } {
	msg -error "This operation requires selection of one or more entities to find."
	return "Nothing selected."
    } else {
	set result [nil_set]
	foreach ThisEntity $sel {
	    set entity_name [name $ThisEntity]
	    set files_to_check [where defined $ThisEntity]
	    sappend $files_to_check [where referenced $ThisEntity]
	    foreach ThisFile $files_to_check {
		set ThisFileName [lname $ThisFile]
		set FoundNodes [tree find name=="$entity_name" $ThisFileName]
		sappend $result $FoundNodes
	    }
	}
	return [set_unique $result]
    }
}

############################################################################
# proc          FindASTNodesFromTPMExpression
# Description:  Find AST nodes in selection from TPM expression
############################################################################
proc FindASTNodesFromTPMExpression { sel } {
    set InputProjects [filter project $sel]
    set InputFiles [filter file $sel]
    if {[size $InputProjects] != 0} {
	sappend $InputFiles [defines -files $InputProjects]
    }
    if {[size $InputFiles] == 0} {
	msg -error "This operation requires selection of at least one file or project."
	return "No files selected."
    } else {
	set AllFoundNodes [nil_set]
	set TPMExpression [prompt -title "Enter TPM Search String"]
	if { $TPMExpression == "" } {
	    return ""
	} else {
	    foreach ThisFile $InputFiles {
		src_load $ThisFile
		set FoundNodes [tree find $TPMExpression $ThisFile]
		sappend $AllFoundNodes $FoundNodes
		src_unload $ThisFile
	    }
	    return [set_unique $AllFoundNodes]
	}
    }
}

############################################################################
# proc 		GetParentASTNodes
# Description:	Find the next parent node
############################################################################
proc GetParentASTNodes { sel } {
    set ThisNode [data node $sel]
    if {[size $ThisNode] < 1} {
	msg -error "Selection could not be converted to AST nodes."
	return "Bad selection."
    } else {
	return [tree navigate <- $ThisNode]
    }
}

############################################################################
# proc 		GetChildASTNodes
# Description:	Find the next parent node
############################################################################
proc GetChildASTNodes { sel } {
    set ThisNode [data node $sel]
    if {[size $ThisNode] < 1} {
	msg -error "Selection could not be converted to AST nodes."
	return "Bad selection."
    } else {
	set result [nil_set]
	set ThisNode [tree navigate -> $ThisNode]
	while {[size $ThisNode] != 0} {
	    sappend $result $ThisNode
	    set ThisNode [tree navigate , $ThisNode]
	}
	return [set_unique $result]
    }
}

###########################################################################
# proc 		ShowASTTree
# Description:	Displays the AST tree of from selected node and show in emacs
############################################################################
proc ShowASTTree { sel } {
    global MenuOutputFile
    set ThisNode [data node $sel]
    if {[size $ThisNode]!=1} {
	if {[size $sel] != 1} {
	    msg -error "This operation requires selection of exactly one AST node or entity."
	} else {
	    msg -error "Selection could not be converted to a single AST node."
	}
	return "Bad selection."
    } else {
	> $MenuOutputFile { tree print [filter ast $ThisNode] }
	emacs_command "(switch-to-buffer (find-file-noselect-orig \"$MenuOutputFile\"))"
	return "Done"
    }
}


add_menu "Access.AST"
add_item "Access.AST"		"Find Nodes in Files..."	FindASTNodesFromTPMExpression		-optional
add_item "Access.AST"		"Find Nodes of Symbols"		FindASTNodesOfEntitiesFromName		-optional
add_item "Access.AST"		"Force Nodes Valid"		FindValidASTNodes			-optional
add_item "Access.AST"		"Get Parent Nodes"		GetParentASTNodes			-optional
add_item "Access.AST"		"Get Child Nodes"		GetChildASTNodes			-optional
add_item "Access.AST"		"Show AST Tree"			ShowASTTree				-optional


