#!/bin/sh
# cm_copy_src (ClearCase) - Checkout the source file (reserved)


#special case for copying files to do a 3-file merge
if [ "$cm_workfile" != "$cm_sysfile" ]; then
  if [ "$cm_version" != "" ] ; then
    branch_merge=`echo $cm_version | sed -e '/PREVIOUS_BRANCH.*/!d'`
    if [ "$branch_merge" != "" ] ; then
      target_branch=`echo $cm_version | sed -e 's/PREVIOUS_BRANCH\-\(.*\)/\1/'`
      target_branch=`echo $target_branch | sed -e '/@@/!d' -e 's/^.*@@\(.*\)/\1/'`
      if [ "$target_branch" = "" ] ; then
        target_branch="main"
      fi
      branch_start=`echo $cm_revision_file | sed -e "s%\(@@.*/$target_branch/.*/\).*%\10%"`
      prev_branch=`cleartool describe -short -pred $branch_start`
      sourcefile="$cm_sysfile@@$prev_branch"
    else
      sourcefile="$cm_sysfile@@$cm_version"
    fi
  else
    sourcefile="$cm_revision_file"
  fi
  targetfile="$cm_workfile"
  echo "cp $sourcefile $targetfile"
        cp $sourcefile $targetfile
  exit 0
fi

# exit script if we get any errors
set -e

# Execute beforeget script if it exists
if [ "$cm_optscripts" != "" -a -f $cm_optscripts/cm_beforeget ] ; then
  $cm_optscripts/cm_beforeget
fi

# Setup the revision command line option if a revision was specified
#if [ "$cm_version" != "" ]; then
#  cm_options="-branch $cm_version $cm_options"
#fi

# Check if file is writeable it was already checked out probably
if [ -w $cm_workfile ] ; then

  $PSETCFG/util/remove_file $cm_workfile
  echo "cleartool uncheck -rm $cm_workfile"
  set +e
        cleartool uncheck -rm $cm_workfile 2> /dev/null
  set -e

else

  set +e
  checkedout=`cleartool describe $cm_sysfile | head -1 | grep CHECKEDOUT`
  set -e
  if [ "$checkedout" != "" ] ; then
    echo "cleartool uncheck -rm $cm_workfile"
          cleartool uncheck -rm $cm_workfile

  fi

fi

# Check out the source file
echo "cleartool checkout -cq -unreserved $cm_options $cm_sysfile <${cm_description:=/dev/null}"
checkout_output=`cleartool checkout -cq -unreserved $cm_options $cm_sysfile <${cm_description:=/dev/null}`
echo $checkout_output
version_number=`echo $checkout_output | sed 's/^.*from version \"\(.*\)\".*/\1/'`
cm_revision_file="$cm_sysfile@@$version_number"

echo "cm_sysfile  : $cm_sysfile" 1>&2
echo "cm_workfile : $cm_workfile" 1>&2
echo "cm_revision_file : $cm_revision_file" 1>&2
echo "cm_version : $cm_version" 1>&2

# Copy the correct version if was specified
if [ "$cm_version" != "" ]; then
  echo "cp $cm_sysfile@@$cm_version $cm_workfile"
        cp $cm_sysfile@@$cm_version $cm_workfile
fi

# Execute afterget script (async) if it exists
if [ "$cm_optscripts" != "" -a -f $cm_optscripts/cm_afterget ] ; then
  $cm_optscripts/cm_afterget &
fi

exit 0


#### Parameters    : None
#### Return values : 0 = success, !0 = failure
#### Output	   : stdout = informational (displayed in configshell)
		   : stderr = error messages (displayed in config status dialog box)

#### Environment Variables
# Environment variables setup by DISCOVER for ALL config scripts:
#	$PSETCFG	  - path to directory containing the config scripts
#	$cm_optscripts    - Points to the directory of optional scripts
# Additional environment variables setup for this script by the configurator:
#	$cm_sysfile	  - path to system (public) copy of file to be processed
#			    (already processed by the pending filter at this point)
#	$cm_version	  - name of version to check out (e.g. "1.343" or "/main/1")
#	$cm_options       - user defined options as configured in Configurator
#			    preferences dialog box for get
#       $cm_description   - path pointing to file containing users comments

#### Optional Scripts
#	cm_beforeget	  - Run before checking out (or copying) the source file
#	cm_afterget	  - Run in the background if the check out succeeds
